<script type="module" src="globals.js"/>
    <!-- This file holds the baseline commands -->
    <script type="module" src="generic/input_controls.js"/>
    <!-- This file manages the inputs from sliders, color pickers, etc -->
    <script type="module" src="graphics/drawItems.js"/>
    <script>
		// document.addEventListener('DOMContentLoaded', () =&gt; {
		// 	// Call the drawScene function when the DOM is fully loaded
		// 	drawScene();
		// });
	</script>













	//-------------------- Cube ----------------------//
	var vertexShaderSrc = `attribute vec3 a_position;
    attribute vec3 a_color;
    uniform mat4 u_cube;
    uniform mat4 u_camera;
    varying vec3 v_color;
    void main(void) {
        v_color = a_color;
        gl_Position = u_camera * u_cube * vec4(a_position, 1.0);
    }`;

	var fragmentShaderSrc = ` precision mediump float;
    varying vec3 v_color;
    void main(void) {
        gl_FragColor = vec4(v_color.rgb, 1.0);
    }`;

	var uCube = gl.getUniformLocation(program_cube, 'u_cube');
    var uCamera = gl.getUniformLocation(program_cube, 'u_camera');
    var aPosition = gl.getAttribLocation(program_cube, 'a_position');
    var aColor = gl.getAttribLocation(program_cube, 'a_color');



	var vertexShaderCube = gl.createShader(gl.VERTEX_SHADER);
    gl.shaderSource(vertexShaderCube, vertexShaderSrc);
    gl.compileShader(vertexShaderCube);

    var fragmentShaderCube = gl.createShader(gl.FRAGMENT_SHADER);
    gl.shaderSource(fragmentShaderCube, fragmentShaderSrc);
    gl.compileShader(fragmentShaderCube);


	var program_cube = gl.createProgram();
    gl.attachShader(program_cube, vertexShader);
    gl.attachShader(program_cube, fragmentShader);
    gl.linkProgram(program_cube);


	gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);

	var lastRenderTime = Date.now();








    var vertexBuffer = gl.createBuffer();
    var vertices = [
        // Передняя грань
        -1, -1, -1,
        1, -1, -1,
        -1, -1, 1,

        1, -1, 1,
        -1, -1, 1,
        1, -1, -1,

        // Задняя грань
        -1, 1, -1,
        -1, 1, 1,
        1, 1, -1,

        1, 1, 1,
        1, 1, -1,
        -1, 1, 1,

        // Нижняя грань
        -1, -1, -1,
        -1, 1, -1,
        1, -1, -1,

        1, 1, -1,
        1, -1, -1,
        -1, 1, -1,

        // Верхняя грань
        -1, -1, 1,
        1, -1, 1,
        -1, 1, 1,

        1, 1, 1,
        -1, 1, 1,
        1, -1, 1,

        // Левая грань
        -1, -1, -1,
        -1, -1, 1,
        -1, 1, -1,

        -1, 1, 1,
        -1, 1, -1,
        -1, -1, 1,

        // Правая грань
        1, -1, -1,
        1, 1, -1,
        1, -1, 1,

        1, 1, 1,
        1, -1, 1,
        1, 1, -1
    ];
    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);

    var colorBuffer = gl.createBuffer();
    var colors = [
        // Передняя грань
        1, 0.5, 0.5,
        1, 0.5, 0.5,
        1, 0.5, 0.5,
        1, 0.5, 0.5,
        1, 0.5, 0.5,
        1, 0.5, 0.5,

        // Задняя грань
        1, 0.5, 0.5,
        1, 0.5, 0.5,
        1, 0.5, 0.5,
        1, 0.5, 0.5,
        1, 0.5, 0.5,
        1, 0.5, 0.5,

        // Нижняя грань
        0.5, 0.7, 1,
        0.5, 0.7, 1,
        0.5, 0.7, 1,
        0.5, 0.7, 1,
        0.5, 0.7, 1,
        0.5, 0.7, 1,

        // Верхняя грань
        0.5, 0.7, 1,
        0.5, 0.7, 1,
        0.5, 0.7, 1,
        0.5, 0.7, 1,
        0.5, 0.7, 1,
        0.5, 0.7, 1,

        // Левая грань
        0.3, 1, 0.3,
        0.3, 1, 0.3,
        0.3, 1, 0.3,
        0.3, 1, 0.3,
        0.3, 1, 0.3,
        0.3, 1, 0.3,

        // right face
        0.3, 1, 0.3,
        0.3, 1, 0.3,
        0.3, 1, 0.3,
        0.3, 1, 0.3,
        0.3, 1, 0.3,
        0.3, 1, 0.3
    ];
    gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW);

    var cameraMatrix = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
    mat4perspective(cameraMatrix, 45, window.innerWidth / window.innerHeight, 0.1, 1000);
    translate(cameraMatrix, cameraMatrix, [0, 0, -5]);

    // Создадим единичную матрицу положения куба
    var cubeMatrix = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];

	 var time = Date.now();
        var dt = lastRenderTime - time;

        // Вращаем куб относительно оси Y
        rotateY(cubeMatrix, cubeMatrix, dt / 1000);
        // Вращаем куб относительно оси Z
        rotateZ(cubeMatrix, cubeMatrix, dt / 1000);

		console.log(cubeMatrix);

        // Очищаем сцену, закрашивая её в белый цвет

        gl.useProgram(program_cube);

        gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
        gl.enableVertexAttribArray(aPosition);
        gl.vertexAttribPointer(aPosition, 3, gl.FLOAT, false, 0, 0);

        gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);
        gl.enableVertexAttribArray(aColor);
        gl.vertexAttribPointer(aColor, 3, gl.FLOAT, false, 0, 0);

        gl.uniformMatrix4fv(uCube, false, cubeMatrix);
        gl.uniformMatrix4fv(uCamera, false, cameraMatrix);

        gl.drawArrays(gl.TRIANGLES, 0, 36);

        lastRenderTime = time;





function mat4perspective(out:any, fovyInRadians:any, aspect:any, near:any, far:any) {
    const f = 1.0 / Math.tan(fovyInRadians / 2);
    const nf = 1 / (near - far);
    out[0] = f / aspect;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = f;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = (far + near) * nf;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[14] = 2 * far * near * nf;
    out[15] = 0;
}

function translate(out:any, a:any, v:any) {

  let x = v[0],

    y = v[1],

    z = v[2];

  let a00, a01, a02, a03;

  let a10, a11, a12, a13;

  let a20, a21, a22, a23;

  if (a === out) {

    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];

    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];

    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];

    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];

  } else {

    a00 = a[0];

    a01 = a[1];

    a02 = a[2];

    a03 = a[3];

    a10 = a[4];

    a11 = a[5];

    a12 = a[6];

    a13 = a[7];

    a20 = a[8];

    a21 = a[9];

    a22 = a[10];

    a23 = a[11];

    out[0] = a00;

    out[1] = a01;

    out[2] = a02;

    out[3] = a03;

    out[4] = a10;

    out[5] = a11;

    out[6] = a12;

    out[7] = a13;

    out[8] = a20;

    out[9] = a21;

    out[10] = a22;

    out[11] = a23;

    out[12] = a00 * x + a10 * y + a20 * z + a[12];

    out[13] = a01 * x + a11 * y + a21 * z + a[13];

    out[14] = a02 * x + a12 * y + a22 * z + a[14];

    out[15] = a03 * x + a13 * y + a23 * z + a[15];

  }

  return out;

}


function rotateY(out:any, a:any, rad:any) {

  let s = Math.sin(rad);

  let c = Math.cos(rad);

  let a00 = a[0];

  let a01 = a[1];

  let a02 = a[2];

  let a03 = a[3];

  let a20 = a[8];

  let a21 = a[9];

  let a22 = a[10];

  let a23 = a[11];

  if (a !== out) {

    // If the source and destination differ, copy the unchanged rows

    out[4] = a[4];

    out[5] = a[5];

    out[6] = a[6];

    out[7] = a[7];

    out[12] = a[12];

    out[13] = a[13];

    out[14] = a[14];

    out[15] = a[15];

  }

  // Perform axis-specific matrix multiplication

  out[0] = a00 * c - a20 * s;

  out[1] = a01 * c - a21 * s;

  out[2] = a02 * c - a22 * s;

  out[3] = a03 * c - a23 * s;

  out[8] = a00 * s + a20 * c;

  out[9] = a01 * s + a21 * c;

  out[10] = a02 * s + a22 * c;

  out[11] = a03 * s + a23 * c;

  return out;

}

function rotateZ(out:any, a:any, rad:any) {

  let s = Math.sin(rad);

  let c = Math.cos(rad);

  let a00 = a[0];

  let a01 = a[1];

  let a02 = a[2];

  let a03 = a[3];

  let a10 = a[4];

  let a11 = a[5];

  let a12 = a[6];

  let a13 = a[7];

  if (a !== out) {

    // If the source and destination differ, copy the unchanged last row

    out[8] = a[8];

    out[9] = a[9];

    out[10] = a[10];

    out[11] = a[11];

    out[12] = a[12];

    out[13] = a[13];

    out[14] = a[14];

    out[15] = a[15];

  }

  // Perform axis-specific matrix multiplication

  out[0] = a00 * c + a10 * s;

  out[1] = a01 * c + a11 * s;

  out[2] = a02 * c + a12 * s;

  out[3] = a03 * c + a13 * s;

  out[4] = a10 * c - a00 * s;

  out[5] = a11 * c - a01 * s;

  out[6] = a12 * c - a02 * s;

  out[7] = a13 * c - a03 * s;

  return out;

}

